---
title: Introduction aux méthodes quantitatives avec {{< fa brands r-project >}}
subtitle: |
  **[Chapitre 4: manipuler des données spatiales]{.orange}**
authors: |
  [Lino Galiana](https://www.linogaliana.fr/),
# date: 
slide-number: true
header: |
  [Retour à la page principale du cours](https://rgeo.linogaliana.fr/)
footer: |
  Introduction aux méthodes quantitatives avec {{< fa brands r-project >}}, École Normale Supérieure ([retour page principale](/))
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  onyxia-revealjs
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  #onyxia-dark-revealjs:
controls: true
css: custom.css
from: markdown+emoji
listing:
  id: sample-listings
  contents: teaching
  sort: "date desc"
  type: table
#filters:
#  - reveal-header
---

## Chapitre introductif

::: {.callout-note}
- Exercices associés à ce chapitre [ici](/exercises/geospatial-wrangling.html)
:::

![](../cards/geospatial-wrangling/geographer.png){fig-align="center"}

- [Retour à la page principale](/)

## Introduction

- `dplyr` facilite l'analyse de données avec {{< fa brands r-project >}} 

. . .

- Mais les données géographiques sont plus complexes:
    + Données classiques associées à des objets géométriques
    + Besoin de faire des opérations géométriques (fusion, dissolution...)

. . . 

- SIG offrent une approche cohérente pour ce type d'opération
    + {{< fa brands r-project >}} peut se comporter comme un SIG !
    
## La réponse: le _package_ `sf` !

![`sf`, une association de tables de données classiques à des géométries](https://user-images.githubusercontent.com/520851/50280460-e35c1880-044c-11e9-9ed7-cc46754e49db.jpg){width="70%"}


![L'écosystème du [`tidyverse`](https://www.tidyverse.org/)](./img/tidyverse.png)

## La réponse: le _package_ `sf` !

- Extension de `dplyr` pour les données spatiales
    - Verbes `dplyr` fonctionnent de la même manière
    - Opérations géométriques grâce à `GDAL` en arrière plan

Un `tibble` amélioré:

```{r}
#| output: false
library(cartiflette)
communes_borders <- download_vectorfile_url_all(
    crs = 4326,
    values = c("92"),
    borders="COMMUNE",
    vectorfile_format="geojson",
    filter_by="DEPARTEMENT",
    source="EXPRESS-COG-CARTO-TERRITOIRE",
    year=2022)
```

```{r}
#| output: false
library(dplyr)
head(communes_borders %>% select(NOM, POPULATION))
```

![](img/sf.png){fig-align = "center"}


## Anatomie d'un objet `sf` 

### [Les attributs]{.green2}

- Valeurs associées à chaque niveau géographique
    - Donnée tabulaire classique
    - `dplyr` fonctionne normalement

```{ojs}
//| echo: false
import {download_vectorfile} from "@linogaliana/cartiflette-js"
bertin = require("bertin@latest")

df = download_vectorfile({
      "value": "92",
      "crs": 4326,
      "borders": "COMMUNE",
      "vectorfile_format": "geojson",
      "filter_by": "DEPARTEMENT",
      "source": "EXPRESS-COG-CARTO-TERRITOIRE",
      "year": 2022
  })
```

```{ojs}
Inputs.table(
  bertin.properties.table(df),
  {columns: ["NOM","POPULATION"]}
)
```

## Anatomie d'un objet `sf` 

### [Les géométries]{.red2}

- Valeurs numériques interprétées pour représenter la dimension géographique
    + Plusieurs types d'objets: points, polygones, lignes...
    + Opérations sur géométries grâce à `sf`


```{r}
#| fig-align: center
#| fig-cap: "Illustration de st_union"
#| layout-ncol: 2
library(ggplot2)
library(sf)


ggplot(communes_borders) +
  geom_sf(fill = "transparent") +
  theme_void()

ggplot(st_union(communes_borders)) +
  geom_sf(fill = "transparent") +
  theme_void()
```

## Anatomie d'un objet `sf` 
### [Le système de représentation]{.blue2}

