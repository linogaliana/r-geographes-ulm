---
title: Introduction aux m√©thodes quantitatives avec {{< fa brands r-project >}}
subtitle: |
  **[Chapitre 4: manipuler des donn√©es spatiales]{.orange}**
authors: |
  [Lino Galiana](https://www.linogaliana.fr/),
# date: 
slide-number: true
header: |
  [Retour √† la page principale du cours](https://rgeo.linogaliana.fr/)
footer: |
  Introduction aux m√©thodes quantitatives avec {{< fa brands r-project >}}, √âcole Normale Sup√©rieure ([retour page principale](/))
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  onyxia-revealjs
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  #onyxia-dark-revealjs:
controls: true
css: custom.css
from: markdown+emoji
listing:
  id: sample-listings
  contents: teaching
  sort: "date desc"
  type: table
#filters:
#  - reveal-header
---

## Chapitre introductif

::: {.callout-note}
- Exercices associ√©s √† ce chapitre [ici](/exercises/geospatial-wrangling.html)
:::

![](../cards/geospatial-wrangling/geographer.png){fig-align="center"}

- [Retour √† la page principale](/)

## Introduction

- `dplyr` facilite l'analyse de donn√©es avec {{< fa brands r-project >}} 

. . .

- Mais les donn√©es g√©ographiques sont plus complexes:
    + Donn√©es classiques associ√©es √† des objets g√©om√©triques
    + Besoin de faire des op√©rations g√©om√©triques (fusion, dissolution...)

. . . 

- SIG offrent une approche coh√©rente pour ce type d'op√©ration
    + {{< fa brands r-project >}} peut se comporter comme un SIG !
    
## La r√©ponse: le _package_ `sf` !

![`sf`, une association de tables de donn√©es classiques √† des g√©om√©tries](https://user-images.githubusercontent.com/520851/50280460-e35c1880-044c-11e9-9ed7-cc46754e49db.jpg){width="70%"}


![L'√©cosyst√®me du [`tidyverse`](https://www.tidyverse.org/)](./img/tidyverse.png)

## La r√©ponse: le _package_ `sf` !

- Extension de `dplyr` pour les donn√©es spatiales
    - Verbes `dplyr` fonctionnent de la m√™me mani√®re
    - Op√©rations g√©om√©triques gr√¢ce √† `GDAL` en arri√®re plan

Un `tibble` am√©lior√©:

```{r}
#| output: false
library(cartiflette)
communes_borders <- download_vectorfile_url_all(
    crs = 4326,
    values = c("92"),
    borders="COMMUNE",
    vectorfile_format="geojson",
    filter_by="DEPARTEMENT",
    source="EXPRESS-COG-CARTO-TERRITOIRE",
    year=2022)
```

```{r}
#| output: false
library(dplyr)
head(communes_borders %>% select(NOM, POPULATION))
```

![](img/sf.png){fig-align = "center"}


## Anatomie d'un objet `sf` 

### [Les attributs]{.green2}

- Valeurs associ√©es √† chaque niveau g√©ographique
    - Donn√©e tabulaire classique
    - `dplyr` fonctionne normalement

```{ojs}
//| echo: false
import {download_vectorfile} from "@linogaliana/cartiflette-js"
bertin = require("bertin@latest")

df = download_vectorfile({
      "value": "92",
      "crs": 4326,
      "borders": "COMMUNE",
      "vectorfile_format": "geojson",
      "filter_by": "DEPARTEMENT",
      "source": "EXPRESS-COG-CARTO-TERRITOIRE",
      "year": 2022
  })
```

```{ojs}
Inputs.table(
  bertin.properties.table(df),
  {columns: ["NOM","POPULATION"]}
)
```

## Anatomie d'un objet `sf` 

### [Les g√©om√©tries]{.red2}

- Valeurs num√©riques interpr√©t√©es pour repr√©senter la dimension g√©ographique
    + Plusieurs types d'objets: points, polygones, lignes...
    + Op√©rations sur g√©om√©tries gr√¢ce √† `sf`


```{r}
#| fig-align: center
#| fig-cap: "Illustration de st_union"
#| layout-ncol: 2
library(ggplot2)
library(sf)


ggplot(communes_borders) +
  geom_sf(fill = "transparent") +
  theme_void()

ggplot(st_union(communes_borders)) +
  geom_sf(fill = "transparent") +
  theme_void()
```

## Anatomie d'un objet `sf` {#projection .smaller}
### [Le syst√®me de r√©f√©rence de l'objet]{.blue2}

:::: {.columns}

::: {.column width="60%"}

::::: {.incremental}

- Position sur terre $\to$ position dans le plan <br>
- Multitude de projections (cf. suite)<br>
- Gestion coh√©rente gr√¢ce √† `sf`
    + Utilise les codes EPSG (4326, 2154...)
    + D√©finition souvent automatique
    + Reprojections facilit√©es avec `st_transform`

:::::

:::

::: {.column width="40%"}

```{r}
#| echo: true
st_crs(communes_borders)
```

:::

::::

# Les projections cartographiques

## Principe {.smaller}

:::: {.columns}

::: {.column width="40%"}

- Repr√©sentation dans un plan (2D) d'une surface arrondie en 3D
- [Th√©or√®me remarquable de Gauss](https://fr.wikipedia.org/wiki/Theorema_egregium): _la surface de la Terre ne peut √™tre cartographi√©e sans distortion._
- Multitude de projections possibles

::: {.callout-tip}
## Exemple: projection de Mercator

Pr√©serve les angles mais ne conserve pas les surfaces et leurs proportions relatives
(cf. site [thetruesize.com](https://www.thetruesize.com)).

:::

:::

::: {.column width="60%"}
```{ojs}
html`<div class="container">
  <div class="row">
    <div class="projection">
      <div class="projection-label">Choisir une projection</div>
      ${viewof projection}
    </div>
  </div>
  <div class="row">
    <div class="projectedMap">
      ${projectedMap}
    </div>
  </div>
</div>`
```
:::


::::

```{ojs}
viewof projection = projectionInput({
  name: "",
  value: "Mercator"
})
```



```{ojs}
projectedMap = map(projection,
  {
    //svg: true,
    value: projection.options,
    width: screen.width/4,
    //height: 300,
    //rotate: [0, -90],
    //inertia: true,
    show_equator: true,
    background: "#f1f0eb"
    
    //show_structure: true
})
```

```{ojs}
import {projectionInput} from "@fil/d3-projections"
import {map} from "@linogaliana/base-map"
```


## (Web) Mercator / WGS 84 (EPSG 4326) {.smaller}

:::: {.columns}

::: {.column width="50%"}
- Projection la plus usuelle:
    + Syst√®me GPS (position pr√©cise depuis des satellites gr√¢ce [conservation des angles](https://medium.com/@_FrancoisM/introduction-%C3%A0-la-manipulation-de-donn%C3%A9es-cartographiques-23b4e38d8f0f))
    + Fonds de carte _web_ Google, OpenStreetMap...


- Mais __d√©forme les distances et superficies__

::::: {.callout-tip}
## Astuce pour la France

- Longitude ($x$) tourne autour de 0¬∞ (de -5.2 √† +9.6 pour √™tre plus pr√©cis)
- La latitude  ($y$) autour de 45 (entre +41.3 √† +51.1)

[Plus de d√©tails](https://medium.com/@_FrancoisM/introduction-%C3%A0-la-manipulation-de-donn%C3%A9es-cartographiques-23b4e38d8f0f)
:::::


:::

::: {.column width="50%"}

```{ojs}
size = 400
html`<iframe width="${size}" height="${size*1.15 + 50}" frameborder="0"   overflow-x = "hidden" overflow-Y="hidden"
  src="https://observablehq.com/embed/@neocartocnrs/impact-of-projections-on-areas?cells=map%2Cviewof+mycountry"></iframe>`
```  

:::
::::
    
```{ojs}
//| eval: false
html`<div class="grid-container">
  <div class="viewof-projection">${viewof projectionBertin}</div>
  <div class="viewof-mycountry">${viewof mycountry}</div>
  <div class="map-bertin">${mapBertin}</div>
</div>`
```

```{ojs}
//| eval: false
import {map as mapBertin, viewof projection as projectionBertin, viewof mycountry} from "@neocartocnrs/impact-of-projections-on-areas"
```



## Lambert 93 (EPSG 2154) {.smaller}

- Projection officielle pour la m√©tropole
    + [Projection conique](https://fr.wikipedia.org/wiki/Projection_conique_conforme_de_Lambert)
    + D'autres Lambert pour les DROM
    
. . .
    
- Orthonorm√©e, centr√©e sur la m√©tropole
    + On peut faire des calculs de distance sur des coordonn√©es
    + Distance en m√®tres = distance euclidienne ($\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$)


:::{.callout-tip}
## Astuce pour la France

- Coordonn√©es $x$:  entre 100 000 et 1 300 000
- La latitude  ($y$): entre 6 000 000 et 7 200 000


[Plus de d√©tails](https://medium.com/@_FrancoisM/introduction-%C3%A0-la-manipulation-de-donn%C3%A9es-cartographiques-23b4e38d8f0f)
:::


## La projection de Spilhaus

__Le monde vu par les [poissons]{.blue2} üêüüê°üê†__

```{ojs}
html`<div class="centered">${spilhaus}</div>`
```

```{ojs}
spilhaus = {
  const width = 600;
  const height = width;

  const context = DOM.context2d(width, height);
  const projection = d3.geoStereographic()
    .rotate([95, 45])
    .translate([width / 2, height / 2])
    .scale(width / 10.1)
    .center([30, -5])
    .clipAngle(166);
  const path = d3.geoPath(projection, context);

  const land = topojson.feature(world, world.objects.land);

  context.lineJoin = "round";
  context.lineCap = "round";
  context.fillStyle = "#f2f1ed";
  context.fillRect(0, 0, width, height);

  context.beginPath();
  path({type: "Sphere"});
  path(land);
  context.lineWidth = 0.5;
  context.stroke();
  context.clip("evenodd");

  context.save();
  context.beginPath();
  path(land);
  context.filter = "blur(12px)";
  context.fillStyle = "#006994";
  context.fill("evenodd");
  context.restore();
  
  context.beginPath();
  path(d3.geoGraticule10());
  context.globalAlpha = 0.2;
  context.strokeStyle = "#000";
  context.stroke();

  return context.canvas;
}
```


```{ojs}
//import {map as spilhausmap} with {height, width} from "@d3/spilhaus-shoreline-map"
import { world } from "@d3/spilhaus-shoreline-map"
```


