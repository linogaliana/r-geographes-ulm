---
title: Introduction aux m√©thodes quantitatives avec {{< fa brands r-project >}}
subtitle: |
  **[Chapitre 2: manipuler des donn√©es structur√©es]{.orange}**
authors: |
  [Lino Galiana](https://www.linogaliana.fr/),
# date: 
slide-number: true
header: |
  [Retour √† la page principale du cours](https://rgeo.linogaliana.fr/)
footer: |
  Introduction aux m√©thodes quantitatives avec {{< fa brands r-project >}}, √âcole Normale Sup√©rieure ([retour page principale](/))
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  onyxia-revealjs
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  #onyxia-dark-revealjs:
controls: true
css: custom.css
from: markdown+emoji
listing:
  id: sample-listings
  contents: teaching
  sort: "date desc"
  type: table
#filters:
#  - reveal-header
---

## Chapitre introductif

::: {.callout-note}
- Exercices associ√©s √† ce chapitre [ici](exercises/r-wrangling.html)
:::

![](../cards/wrangling/kidmatrix.png){fig-align="center"}

- [Retour √† la page principale](/)

## Introduction

- {{< fa brands r-project >}} centr√© autour du _dataframe_ 

. . .

- Mais manipulations parfois un peu lourdes :
    - `df$var`: un peu lourd
    - `df[,]`: un peu trop calqu√© sur les matrices

. . . 

- Donn√©es textuelles: une base perfectible
    - Des _outputs_ alambiqu√©s
    - Des fonctionnalit√©s manquantes par rapport √† `Python`
    
## La r√©ponse: le `tidyverse` !

![L'√©cosyst√®me du [`tidyverse`](https://www.tidyverse.org/)](./img/tidyverse.png)

## La r√©ponse: le `tidyverse` !

Un ensemble de _packages_ d√©velopp√©s par `RStudio` qui facilite :

- La lecture (`readr`) et la manipulation de bases de donn√©es (`dplyr`)
- L'exploitation de donn√©es textuelles (`stringr`), temporelles (`lubridate`)
ou cat√©gorielles (`forcats`)
- La cr√©ation de graphiques (`ggplot2`)
- La programmation √† partir de _dataframes_ (`purrr`)
- Et bien d'autres choses...

## Le concept de donn√©es _tidy_


- Chaque variable poss√®de sa propre colonne ;
- Chaque observation poss√®de sa propre ligne ;
- Une valeur, mat√©rialisant une observation d‚Äôune variable, se trouve sur une unique cellule.

::: {.callout-note}
Concept popularis√© par Hadley Wickham.
:::

# Les formats de donn√©es

## G√©n√©ralit√©s

- Donn√©es peuvent √™tre stock√©es dans de nombreux formats diff√©rents
    + Standards diff√©rents
    + Mani√®res d'importer diff√©rentes

. . .

- Fonctionnalit√©s de {{< fa brands r-project >}} limit√©es:
    + Packages sp√©cialis√©s pour certains formats
    + Objectif: applatir l'information dans un _dataframe_

::: {.callout-note}
On verra les formats g√©ographiques, et leurs enjeux, ult√©rieurement
:::

## Le `CSV`

- Format de fichier plat avec des colonnes d√©limit√©es:
    + Standard: `,` en d√©limitateur, `.` en d√©cimale ;
    + Variante europ√©enne üòÆ‚Äçüí®: `;` en d√©limitateur, `,` en d√©cimale

- Format universel, simple d'utilisation (quelques limites)


```{ojs}
viewof info_csv = Inputs.radio(
  ["Fichier brut", "Ficher apr√®s import"], {value: "Fichier brut"}
)
```

```{ojs}
info_csv == "Fichier brut" ? html`<div>${md_csv}<div>` : html`<div>${df_csv}<div>`
```



```{ojs}
//| output: false
df_csv = Inputs.table(
  d3.csvParse(raw_csv)
)
md_csv = md`
\`\`\`
${raw_csv}
\`\`\`
`
```

```{ojs}
//| output: false
raw_csv = `DEP,REG,CHEFLIEU,TNCC,NCC,NCCENR,LIBELLE
01,84,01053,5,AIN,Ain,Ain
02,32,02408,5,AISNE,Aisne,Aisne
03,84,03190,5,ALLIER,Allier,Allier
04,93,04070,4,ALPES DE HAUTE PROVENCE,Alpes-de-Haute-Provence,Alpes-de-Haute-Provence
05,93,05061,4,HAUTES ALPES,Hautes-Alpes,Hautes-Alpes
06,93,06088,4,ALPES MARITIMES,Alpes-Maritimes,Alpes-Maritimes
`
```

## Le `CSV`

- Lecture avec la fonction `read_csv` du package `readr`!

```{r}
#| eval: false
#| echo: true
library(readr) # <1>
read_csv("dossier_donnees/nom_fichier.csv") # <2>
```
1. On importe la librairie `readr` pour avoir acc√®s √† la fonction `read_csv`
2. On utilise `read_csv` pour lire les donn√©es stock√©es dans le chemin relatif
`dossier_donnees/nom_fichier.csv`


:::{.callout-note}
- CSV avec d√©limitateur `;`: fonction `read_csv2`. 
- Formats plats plus exotiques (`.txt` par exemple): `read_delim`

Plus de d√©tails dans la documentation [`utilitR`](https://www.book.utilitr.org/03_fiches_thematiques/fiche_import_fichiers_plats#importer-un-fichier-avec-le-package-readr)
:::

## Le `JSON`

- Le format du _web_, notamment des API 
    + API: on verra √ßa plus tard

```{ojs}
viewof info_json = Inputs.radio(
  ["Fichier brut", "Ficher apr√®s import"], {value: "Fichier brut"}
)
```

```{ojs}
info_json == "Fichier brut" ? html`<div>${md_json}<div>` : html`<div>${df_json}<div>`
```

```{ojs}
//| output: false
json_string = `[
  {"DEP": "01", "REG": "84", "CHEFLIEU": "01053", "TNCC": "5", "NCC": "AIN", "NCCENR": "Ain", "LIBELLE": "Ain"},
  {"DEP": "02", "REG": "32", "CHEFLIEU": "02408", "TNCC": "5", "NCC": "AISNE", "NCCENR": "Aisne", "LIBELLE": "Aisne"},
  {"DEP": "03", "REG": "84", "CHEFLIEU": "03190", "TNCC": "5", "NCC": "ALLIER", "NCCENR": "Allier", "LIBELLE": "Allier"},
  {"DEP": "04", "REG": "93", "CHEFLIEU": "04070", "TNCC": "4", "NCC": "ALPES DE HAUTE PROVENCE", "NCCENR": "Alpes-de-Haute-Provence", "LIBELLE": "Alpes-de-Haute-Provence"},
  {"DEP": "05", "REG": "93", "CHEFLIEU": "05061", "TNCC": "4", "NCC": "HAUTES ALPES", "NCCENR": "Hautes-Alpes", "LIBELLE": "Hautes-Alpes"},
  {"DEP": "06", "REG": "93", "CHEFLIEU": "06088", "TNCC": "4", "NCC": "ALPES MARITIMES", "NCCENR": "Alpes-Maritimes", "LIBELLE": "Alpes-Maritimes"}
]`
raw_json = [
  {"DEP": "01", "REG": "84", "CHEFLIEU": "01053", "TNCC": "5", "NCC": "AIN", "NCCENR": "Ain", "LIBELLE": "Ain"},
  {"DEP": "02", "REG": "32", "CHEFLIEU": "02408", "TNCC": "5", "NCC": "AISNE", "NCCENR": "Aisne", "LIBELLE": "Aisne"},
  {"DEP": "03", "REG": "84", "CHEFLIEU": "03190", "TNCC": "5", "NCC": "ALLIER", "NCCENR": "Allier", "LIBELLE": "Allier"},
  {"DEP": "04", "REG": "93", "CHEFLIEU": "04070", "TNCC": "4", "NCC": "ALPES DE HAUTE PROVENCE", "NCCENR": "Alpes-de-Haute-Provence", "LIBELLE": "Alpes-de-Haute-Provence"},
  {"DEP": "05", "REG": "93", "CHEFLIEU": "05061", "TNCC": "4", "NCC": "HAUTES ALPES", "NCCENR": "Hautes-Alpes", "LIBELLE": "Hautes-Alpes"},
  {"DEP": "06", "REG": "93", "CHEFLIEU": "06088", "TNCC": "4", "NCC": "ALPES MARITIMES", "NCCENR": "Alpes-Maritimes", "LIBELLE": "Alpes-Maritimes"}
]
md_json = md`
\`\`\`
${json_string}
\`\`\`
`
```

```{ojs}
//| output: false
df_json = Inputs.table(raw_json)
```

## Le `JSON`

- Import√© comme une liste hi√©rarchis√©e
- Objectif: transformer cette information dans un _dataframe_ `tidy`
    + Pas toujours √©vident !

```{r}
#| eval: false
#| echo: true
library(jsonlite) # <1>
df <- fromJSON(file="dossier_donnees/nom_fichier.json") # <2>
```
1. On importe la librairie `jsonlite` pour avoir acc√®s √† la fonction `fromJSON`
2. On utilise `fromJSON` pour lire les donn√©es stock√©es dans le chemin relatif
`dossier_donnees/nom_fichier.csv`


## Les formats Excel

{{< iconify face-vomiting size=10x >}}

## Les formats Excel

- Format propri√©taire

- M√©lange mise en forme et donn√©es brute
    + Pas appropri√© pour l'analyse de donn√©es
    + Dangereux pour la reproductibilit√© et la transparence

- Plus de d√©tails sur [`utilitR`](https://www.book.utilitr.org/03_fiches_thematiques/fiche_import_tableurs)