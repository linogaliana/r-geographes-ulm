

```{r}
library(ggplot2)
library(dplyr)
ggplot(commune_borders %>% filter(INSEE_REG == 28)) +
  geom_sf(aes(fill = POPULATION)) +
  theme_void()



ggplot(
  population_dep
) + geom_sf(aes(fill = pop_4)) +
  scale_fill_steps(n.breaks = 5) +
  theme_void() +
  labs(fill = "Population (en milliers)") +
  theme(legend.position = "bottom")
  
  
```

```{r}
library(mapsf)

mf_map(
  population_dep, var = "pop", type = "choro",
  nbreaks = 4,
  leg_title = "Population"
  )

mf_map(
  population_dep, var = "pop", type = "prop",
  leg_title = "Population"
  )
```

```{r}
foret <- sf::st_read(
  "https://minio.lab.sspcloud.fr/projet-formation/diffusion/r-geographie/landes.gpkg"
)

ggplot(foret) + geom_sf(fill = "forestgreen", lwd = 0) +
  geom_sf(
    data = departement_borders %>% filter(INSEE_DEP == 40) %>% st_transform(2154),
    color = "black", lwd = 1, fill = "transparent") +
  theme_void() +
  labs(title = "Couvert forestier dans les Landes")

foret <- foret %>% mutate(
  pin = if_else(
    str_detect(toupper(ESSENCE), "PIN"),
    "Pin",
    "Autres essences"
    )
  )

mapping_colors <- c("Pin" = "#228b22", "Autres essences" = "#6B492B")
subtitle <- glue(
  'Le ',
  '<span style = "colors: {mapping_colors["Pin"]}">**Pin**</span>',
  ' et les ',
  '<span style = "colors: {mapping_colors["Autres essences"]}">**Autres essences**</span>',
)


ggplot(foret) + geom_sf(aes(fill = pin), lwd = 0) +
  geom_sf(
    data = departement_borders %>% filter(INSEE_DEP == 40) %>% st_transform(2154),
    color = "black", lwd = 1, fill = "transparent") +
  scale_fill_manual(values = mapping_colors) +
  labs(
    title = "Couvert forestier dans les Landes",
    subtitle = subtitle
    ) +
  theme_void() +
  theme(
    legend.position = "none",
    plot.title = element_markdown(size = 20, lineheight = 1.5, face = "bold"),
    plot.subtitle = element_markdown(size = 14, lineheight = 0.9),
    text = element_text(color = "grey20")
    )


```

:::

# OLD

### Comptages

Un sous-ensemble des données de [Paris _Open Data_](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/information/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name) a été mis à disposition
pour faciliter l'import. 

Il s'agit d'une extraction, qui commence à dater, des données disponibles
sur le site où seules les colonnes
qui servent à cet exercice ont été conservées.

Nous proposons
de télécharger ces données et les enregistrer dans un fichier sur le disque
dur local avant de l'importer[^1]. Cependant, nous n'allons pas faire
cela manuellement mais nous allons plutôt utiliser 
{{< fa brands r-project >}}. Effectuer ce type d'action de manière
manuelle serait une mauvaise pratique du point de vue de la reproductibilité.

```{r}
#| echo: true
#| output: false
url <- "https://minio.lab.sspcloud.fr/projet-formation/diffusion/python-datascientist/bike.csv"
download.file(url, "bike.gz") # <1>
comptages <- readr::read_csv("bike.gz") # <2>
```
1. L'extension `.gz` est importante pour la suite car `readr` en a besoin pour comprendre que le fichier est compressé.
2. Lecture des données avec `read_csv` du package `readr`


[^1]: D'habitude, nous recommandons d'utiliser directement l'URL 
de téléchargement ce qui évite de créer un fichier intermédiaire
sur le disque dur. Néanmoins, ici, l'import direct avec `readr`
ne fonctionnera pas car le fichier est mal interprété par la
librairie. Celle-ci ne comprend pas que le fichier est compressé car
il lui manque l'extension `.gz` (un format compressé) à la fin. 

### Localisation des compteurs

```{r}
#| echo: true
#| output: false
compteurs = st_read("https://parisdata.opendatasoft.com/api/explore/v2.1/catalog/datasets/comptage-velo-compteurs/exports/geojson?lang=fr&timezone=Europe%2FBerlin")
```

Il y a quelques valeurs aberrantes dans ce jeu de données qui doivent
être laissées de côté. Elles sont identifiables par le fait que la variable
`nom_compteurs` ne comporte pas les mentions `Bike IN` ou `Bike OUT`. 
Comme c'est un petit peu avancé pour une introduction, nous donnons
directement la solution de ce travail de nettoyage:

```{r}
#| echo: true
compteurs <- compteurs %>% filter(!str_detect("(Bike IN|Bike OUT)", nom_compteur))
```

### Fonds de carte contextuels

On va utiliser à nouveau `cartiflette` pour récupérer les arrondissements
parisiens et les communes limitrophes. 

```{r}
#| output: false
#| echo: true
arrondissements <- download_vectorfile_url_all(
  crs = 4326,
  values = "75",
  borders="COMMUNE_ARRONDISSEMENT",
  vectorfile_format="geojson",
  filter_by="DEPARTEMENT",
  source="EXPRESS-COG-CARTO-TERRITOIRE",
  year=2022) %>%
  st_transform(2154)
```


## Une première carte avec `ggplot`

Lors des chapitres précédents nous avons appris la manière
dont des graphiques peuvent être construits en accumulant des couches. 

Il est possible d'ajouter des couches sur une image, à condition que
les coordonnées coïncident. Pour faire cela de manière
fiable, nous allons utiliser le package `ggmap`[^statutggmap].

[^statutggmap]: `ggmap` est un _package_ assez ancien qui n'a pas trop évolué récemment. Il continue notamment à utiliser des objets `sp`, l'ancêtre de `sf` qui existe déjà depuis plusieurs années. Il est donc possible que ce _package_ soit archivé dans un futur plus ou moins lointain.

L'objectif du prochain exercice est de construire la carte suivante, de manière progressive:


```{r}
bbox_paris <- arrondissements %>% st_transform(4326) %>% st_bbox()
bbox_paris <- setNames(bbox_paris, c("left", "bottom", "right", "top"))

fonds_stamen <- get_map(
  location = bbox_paris,
  maptype ="watercolor",
  source="stamen")

map_paris_watercolor <- ggmap(fonds_stamen) +
  geom_sf(
    data = arrondissements %>% st_transform(4326),
    fill = "transparent", color = "black",
    inherit.aes = FALSE) +
  geom_sf(data = compteurs, color = "red", inherit.aes = FALSE, size = 4, alpha = 0.4) +
  theme_void()
```

```{r}
map_paris_watercolor
```

::: {.callout-tip}
## Exercice 1: construire la carte des compteurs avec `ggmap` et `ggplot`

Pour récupérer la carte, nous allons avoir besoin de construire un certain
nombre d'objets en amont. En premier lieu, il est nécessaire de créer
un vecteur stockant les extrêmes de notre carte. Dans le jargon des
SIG, cela s'appelle la **_bounding box_**. Voici comment faire ceci:

```{r}
#| echo: true
#| output: false
bbox_paris <- arrondissements %>% st_transform(4326) %>% st_bbox() # <1>
bbox_paris <- setNames(bbox_paris, c("left", "bottom", "right", "top")) # <2>
bbox_paris
```
1. On a besoin de coordonnées en WGS84, il faut donc reprojeter les données avant d'appliquer `st_bbox`
2. `ggmap` attend un vecteur dont les noms sont `"left", "bottom", "right", "top"`, `setNames` permet de renommer les éléments de `bbox_paris` 

```{r}
#| echo: true
bbox_paris
```

1. Utiliser `get_map` pour récupérer le fonds de carte. Nommer l'objet 
`map_paris_watercolor`. La carte proposée utilise le fonds `watercolor`, 
dont la source est `stamen`. Utiliser ensuite `ggmap(fonds_stamen)` 
pour vérifier le fonds de carte récupéré. 

2. Ajouter une couche d'arrondissements à cette image avec `geom_sf`. Il va
être nécessaire d'utiliser les arguments suivants:
+ `data`: comme nous initialisons la figure avec `ggmap`, il faut dire à `ggplot` que nous partons du jeu de données `arrondissements` pour cette couche
+ `fill` et `color` pour contrôler, respectivement, la couleur de l'intérieur et des bordures des polygones.
+ `inherit.aes = FALSE`: indispensable à cause du comportement de `ggmap` qui ne sait pas gérer les objets `sf` (cf. _footnote_ antérieure)

3. Ajouter une couche pour représenter la position des stations avec `geom_sf`. Il va
être nécessaire d'utiliser les arguments suivants:
+ `data`: comme nous initialisons la figure avec `ggmap`, il faut dire à `ggplot` que nous partons du jeu de données `compteurs` pour cette couche
+ `color="red"`, `size=5` et `alpha=0.4` pour contrôler l'apparence de nos points
+ `inherit.aes = FALSE`: indispensable à cause du comportement de `ggmap` qui ne sait pas gérer les objets `sf` (cf. _footnote_ antérieure)
4. Finaliser l'esthétique de la carte avec `theme_void()`


<details>
<summary>
Aide pour la question 1
</summary>
Les arguments à utiliser sont `location`, `maptype` et `source`
</details>
:::


<details>
<summary>
Le fonds de carte, sans motif par dessus, est le suivant:
</summary>
```{r}
# Question 1
fonds_stamen <- get_map(
  location = bbox_paris,
  maptype ="watercolor",
  source="stamen")
map_watercolor_exercice <- ggmap(fonds_stamen)
map_watercolor_exercice
```
</details>

<details>
<summary>
En ajoutant les arrondissements par dessus (question 2):
</summary>
```{r}
# Question 2
map_watercolor_exercice <- map_watercolor_exercice +
  geom_sf(
    data = arrondissements %>% st_transform(4326),
    fill = "transparent", color = "black",
    inherit.aes = FALSE
  )
map_watercolor_exercice
```
</details>

<details>
<summary>
Après avoir ajouté les points (question 3)
</summary>
```{r}
# Question 2
map_watercolor_exercice <- map_watercolor_exercice +
  geom_sf(data = compteurs, color = "red", inherit.aes = FALSE, size = 4, alpha = 0.4) 
map_watercolor_exercice
```
</details>



<details>
<summary>
Si vous préférez un autre fonds de carte que `Watercolor`, par exemple `Stamen Toner`:
</summary>
```{r}
# Question 1
fonds_stamen_toner <- get_map(
  location = bbox_paris,
  maptype ="toner",
  source="stamen")

ggmap(fonds_stamen_toner) +
  geom_sf(
    data = arrondissements %>% st_transform(4326),
    fill = "transparent", color = "blue", linewidth = 0.4,
    inherit.aes = FALSE) +
  geom_sf(data = compteurs, color = "red", inherit.aes = FALSE, size = 4, alpha = 0.4) +
  theme_void()
```
</details>

## Heatmap

## Carte de fréquentation des stations

::: {.callout-tip}
## Exercice


:::

```{r}
library(lubridate)
library(tidyr)

# Extract the 'hour' from the 'timestamp' column
comptages <- comptages %>% mutate(hour = hour(`Date et heure de comptage`))

# Filter and calculate the mean 'Comptage horaire' for hours between 7 and 10
df1 <- comptages %>%
  filter(hour %in% 7:10) %>%
  group_by(`Identifiant du compteur`) %>%
  summarise(y = mean(`Comptage horaire`, na.rm = TRUE))


df2 <- comptages %>%
  filter(hour %in% 7:10) %>%
  group_by(`Identifiant du compteur`) %>%
  summarise(y = mean(`Comptage horaire`, na.rm = TRUE))

# Merge with 'compteurs' based on 'id_compteur'
df1 <- compteurs %>%
  left_join(
    df1,
    by = c("id_compteur" = "Identifiant du compteur")
  ) %>%
  drop_na(y)

df2 <- compteurs %>%
  left_join(
    df2, by = c("id_compteur" = "Identifiant du compteur")
  ) %>%
  drop_na(y)
```


```{r}
#| eval: false
library(mapsf)

mf_map(arrondissements %>% st_transform(4326))
# plot population
mf_map(
  x = df1,
  var = c("y","y"),
  type = "prop_choro",
  nbreaks = 4
  #inches = 0.25,
  #col = "brown4",
  #leg_pos = "bottomleft2",
  #leg_title = "Total population"
)
```

