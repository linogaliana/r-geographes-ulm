---
title: "Produire des cartes avec {{< fa brands r-project >}}"
echo: false
number-sections: true
---

::: {.badge}
<a href="https://datalab.sspcloud.fr/launcher/ide/rstudio?autoLaunch=true&init.personalInit=«https%3A%2F%2Fraw.githubusercontent.com%2Flinogaliana%2Fr-geographie%2Fmain%2Fsspcloud%2Finit.sh»&networking.user.enabled=true&onyxia.friendlyName=«rstudio-cours-ENS»" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Tester%20via%20SSP%20cloud%20-%20SSPCloud?logo=R&labelColor=black&color=%231965b8" alt="Onyxia"></a><br>
:::

<details>
<summary>
Dérouler les _slides_ ci-dessous ou [cliquer ici](/slides/ggplot.qmd)
pour afficher les slides en plein écran.
</summary>


``` {.yaml code-preview="/slides/ggplot.qmd"}
```

</details>


Dans ce TP,
nous allons apprendre à créer des cartes
avec {{< fa brands r-project >}}. A mesure que {{< fa brands r-project >}}
devient incontournable auprès des personnes manipulant des données
spatiales, les solutions pour produire des cartes 
de qualité deviennent de plus en 
plus nombreuses. {{< fa brands r-project >}} a de moins en moins à envier
aux logiciels spécialisés comme QGIS. 

Si vous êtes intéressés par `Python` {{< fa brands python >}},
une version très proche de ce TP est disponible dans [mon cours de l'ENSAE](https://pythonds.linogaliana.fr/content/visualisation/maps.html).


La pratique de la cartographie se fera, dans la continuité du chapitre
sur les graphiques, en répliquant des cartes qu'on peut trouver sur
la page de l'*open-data* de la ville de Paris 
[ici](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name).

::: {.callout-note}
Produire de belles cartes demande du temps mais aussi du bon sens. 
Comme toute représentation graphique, il est important de réfléchir au message
à faire passer et aux moyens appropriés.
La sémiologie cartographique, 
une discipline scientifique qui s'intéresse aux messages transmis par les cartes,
propose certaines règles pour éviter de transmettre des messages faussés,
volontairement ou involontairement. 

Certaines peuvent être retrouvées à travers des conseils pratiques
dans
ce [guide de sémiologie cartographique](https://www.insee.fr/fr/statistiques/3640429)
de l'Insee. Celles-ci sont reprises
dans [ce guide](https://juliedjidji.github.io/memocarto/semio.html).

[Cette présentation](https://neocarto.github.io/docs/slides/ENTPE/docs/#/title-slide)
de Nicolas Lambert présente, à partir de nombreux exemples, quelques principes
de la _dataviz_ cartographique.

:::

Ce TP vise à initier:

* Au _package_ [`mapsf`](https://riatelab.github.io/mapsf/),
conçu par les géographiques du RIATE (Paris 7), le _package_ de référence
pour réaliser des cartes avec {{< fa brands r-project >}}
`geoplot` est construit sur `seaborn` et constitue ainsi une extension des graphiques de base.
* Au package [`leaflet`](https://rstudio.github.io/leaflet/) qui est un point d'accès vers la librairie `JavaScript` [leaflet](https://leafletjs.com/) permettant de produire des cartes interactives. Nous approfondirons ultérieurement
les cartes réactives avec un chapitre d'ouverture vers [`Observable`](https://observablehq.com).

Dans ce chapitre, nous allons utiliser les _packages_ suivants:

```{r}
#| output: false
#| echo: true
library(dplyr)
library(sf)
library(stringr)
library(cartiflette)
```

## Données

### Comptages

Un sous-ensemble des données de [Paris _Open Data_](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/information/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name) a été mis à disposition
pour faciliter l'import. 
Il s'agit d'une extraction, qui commence à dater, des données disponibles
sur le site où seules les colonnes
qui servent à cet exercice ont été conservées.

Nous proposons
de télécharger ces données et les enregistrer dans un fichier sur le disque
dur local avant de l'importer[^1]. Cependant, nous n'allons pas faire
cela manuellement mais nous allons plutôt utiliser 
{{< fa brands r-project >}}. Effectuer ce type d'action de manière
manuelle serait une mauvaise pratique du point de vue de la reproductibilité.

```{r}
#| echo: true
#| output: false
url <- "https://minio.lab.sspcloud.fr/projet-formation/diffusion/python-datascientist/bike.csv"
download.file(url, "bike.gz") # <1>
comptages <- readr::read_csv("bike.gz") # <2>
```
1. L'extension `.gz` est importante pour la suite car `readr` en a besoin pour comprendre que le fichier est compressé.
2. Lecture des données avec `read_csv` du package `readr`

### Localisation des compteurs

```{r}
#| echo: true
#| output: false
compteurs = st_read("https://parisdata.opendatasoft.com/api/explore/v2.1/catalog/datasets/comptage-velo-compteurs/exports/geojson?lang=fr&timezone=Europe%2FBerlin")
```

Il y a quelques valeurs aberrantes dans ce jeu de données qui doivent
être laissées de côté. Elles sont identifiables par le fait que la variable
`nom_compteurs` ne comporte pas les mentions `Bike IN` ou `Bike OUT`. 
Comme c'est un petit peu avancé pour une introduction, nous donnons
directement la solution de ce travail de nettoyage:

```{r}
#| echo: true
compteurs <- compteurs %>% filter(!str_detect("(Bike IN|Bike OUT)", nom_compteur))
```

### Fonds de carte contextuels

On va utiliser à nouveau `cartiflette` pour récupérer les arrondissements
parisiens et les communes limitrophes. 

```{r}
petite_couronne <- download_vectorfile_url_all(
    crs = 4326,
    values = c("75", "92", "93", "94"),
    borders="COMMUNE_ARRONDISSEMENT",
    vectorfile_format="geojson",
    filter_by="DEPARTEMENT",
    source="EXPRESS-COG-CARTO-TERRITOIRE",
    year=2022)
```



