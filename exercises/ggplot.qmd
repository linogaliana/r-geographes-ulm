---
title: "Importer et manipuler des donn√©es avec {{< fa brands r-project >}}"
echo: false
number-sections: true
---

::: {.badge}
<a href="https://datalab.sspcloud.fr/launcher/ide/rstudio?autoLaunch=true&init.personalInit=¬´https%3A%2F%2Fraw.githubusercontent.com%2Flinogaliana%2Fr-geographie%2Fmain%2Fsspcloud%2Finit.sh¬ª&networking.user.enabled=true&onyxia.friendlyName=¬´rstudio-cours-ENS¬ª" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Tester%20via%20SSP%20cloud%20-%20SSPCloud?logo=R&labelColor=black&color=%231965b8" alt="Onyxia"></a><br>
:::

<details>
<summary>
D√©rouler les _slides_ ci-dessous ou [cliquer ici](/slides/wrangling.qmd)
pour afficher les slides en plein √©cran.
</summary>


``` {.yaml code-preview="/slides/wrangling.qmd"}
```

</details>


Dans ce troisi√®me TP,
nous allons apprendre √† importer et
manipuler des donn√©es avec
{{< fa brands r-project >}}. {{< fa brands r-project >}} est
tr√®s bien outill√© dans le domaine gr√¢ce √† la librairie
`ggplot2` qui impl√©mente
une [grammaire des graphiques](https://fr.wikibooks.org/wiki/Programmer_en_R/Comprendre_la_grammaire_des_graphiques)
flexible, coh√©rente et simple d'usage. 

Si vous √™tes int√©ress√©s par `Python` {{< fa brands python >}},
une version tr√®s proche de ce TP est disponible dans [mon cours de l'ENSAE](https://pythonds.linogaliana.fr/content/manipulation/02b_pandas_TP.html).


::: {.callout-note}

Certains exemples de code pr√©sentent des annotations sur le c√¥t√©,
passez votre souris dessus pour les afficher, comme ci-dessous

```{r}
#| echo: true
#| output: false
"une annotation explicative m'accompagne √† droite" #<1>
```
1. Je m'affiche quand on passe la souris sur moi üê≠ !

:::

La pratique de la visualisation se fera, dans ce cours, en r√©pliquant des graphiques qu'on peut trouver sur
la page de l'*open-data* de la ville de Paris 
[ici](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/information/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name).


Ce TP vise √† initier:

* Au package [`ggplot2`](https://ggplot2.tidyverse.org/) pour la construction de graphiques fig√©s
* Au package [`plotly`](https://plotly.com/r/) pour les graphiques 
dynamiques, au format HTML

Dans ce chapitre, nous allons utiliser les librairies suivantes:

```{r}
#| echo: true
#| output: false
library(dplyr)
library(ggplot2)
```

Nous verrons par la suite la mani√®re de construire des cartes facilement avec
des formats √©quivalents.

Un sous-ensemble des donn√©es de [paris open data](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/information/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name) a √©t√© mis √† disposition
sur {{< githubrepo >}} pour faciliter l'import (√©limination des colonnes
qui ne nous serviront pas mais ralentissent l'import).


√ätre capable de construire des visualisations de donn√©es
int√©ressantes est une comp√©tence n√©cessaire √† tout
_data-scientist_ ou chercheur. Pour am√©liorer
la qualit√© de ces visualisations, il est recommand√©
de suivre certains conseils donn√©s par des sp√©cialistes
de la _dataviz_ sur la s√©miologie graphique.
Les bonnes visualisations de donn√©es, comme celles du _New York Times_,
reposent certes sur des outils adapt√©s (des librairies `JavaScript`)
mais aussi sur certaines r√®gles de repr√©sentation qui permettent
de comprendre en quelques secondes le message d'une visualisation.
Ce [post de blog](https://blog.datawrapper.de/text-in-data-visualizations/?utm_source=substack&utm_medium=email)
est une ressource qu'il est utile de consulter r√©guli√®rement. 


## Premi√®res productions graphiques

Chercher √† produire une visualisation parfaite du premier coup est
illusoire. Il est beaucoup plus r√©aliste d'am√©liorer graduellement 
une repr√©sentation graphique afin, petit √† petit, de mettre en 
avant les effets de structure. 

Nous allons donc commencer par nous repr√©senter la distribution
des principales stations. Pour cela nous allons produire
rapidement un _barplot_ puis l'am√©liorer graduellement. 

Les donn√©es sont mises √† disposition dans une forme simplifi√©e par
rapport √† celles de l'_open data_ parisien. Nous proposons
de les t√©l√©charger et les enregistrer dans un fichier sur le disque
dur local avant de l'importer[^1].


Nous allons reproduire les deux premiers graphiques de la
[page d'analyse des donn√©es](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name):
*Les 10 compteurs avec la moyenne horaire la plus √©lev√©e* et *Les 10 compteurs ayant comptabilis√©s le plus de v√©los*. Les valeurs chiffr√©es des graphiques seront diff√©rentes de celles de la page en ligne, c'est normal, nous travaillons sur des donn√©es plus anciennes. 


[^1]: D'habitude, nous recommandons d'utiliser directement l'URL 
de t√©l√©chargement ce qui √©vite de cr√©er un fichier interm√©diaire
sur le disque dur. N√©anmoins, ici, l'import direct avec `readr`
ne fonctionnera pas car le fichier est mal interpr√©t√© par la
librairie. Celle-ci ne comprend pas que le fichier est compress√© car
il lui manque l'extension `.gz` (un format compress√©) √† la fin. 

```{r}
#| echo: true
url <- "https://minio.lab.sspcloud.fr/projet-formation/diffusion/python-datascientist/bike.csv"
download.file(url, "bike.gz")
```

::: {.callout-tip}
## Exercice 1 : Importer les donn√©es et produire un premier graphique rapidement

1. Importer les donn√©es de compteurs de v√©los depuis le fichier `bike.gz`.
Celles-ci ont l'aspect suivant:

```{r}
#| output: false
df <- readr::read_csv("bike.gz")
```

```{r}
head(df)
```

2. Garder les dix bornes √† la moyenne la plus √©lev√©e 

```{r}
df1 <- df %>%
  group_by(`Nom du compteur`) %>%
  summarise(`Comptage horaire` = mean(`Comptage horaire`, na.rm = TRUE)) %>%
  arrange(desc(`Comptage horaire`)) %>%
  head(10)
```

```{r}
head(df1)
```

3. En premier lieu, sans se pr√©occuper des √©l√©ments de style ni de la beaut√©
du graphique, cr√©er la structure du _barplot_ (diagramme en batons) de la
[page d'analyse des donn√©es](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name):


```{r}
ggplot(df1, aes(y = reorder(`Nom du compteur`, `Comptage horaire`), x = `Comptage horaire`)) +
  geom_bar(stat = "identity")
```

La suite de l'exercice consiste √† am√©liorer graduellement cette repr√©sentation
pour converger vers la reproduction de la version en _open data_. 

4. Changer les labels des axes

```{r}
ggplot(df1, aes(y = reorder(`Nom du compteur`, `Comptage horaire`), x = `Comptage horaire`)) +
  geom_bar(stat = "identity") + 
  labs(title = "Les 10 compteurs avec la moyenne horaire la plus √©lev√©e",
       x = "Nom du compteur",
       y = "Moyenne horaire")
```

5. Le fond gris permet certes de reconna√Ætre que le graphique a √©t√©
produit avec `ggplot2` mais ce n'est pas tr√®s esth√©tique. Changer le th√®me pour avoir
les √©l√©ments suivants. Mettre √† jour votre figure avec les √©l√©ments de style
suivant:

```r
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5),
        plot.margin = margin(1, 4, 1, 1, "cm"))
```

```{r}
p1 <- ggplot(df1, aes(y = reorder(`Nom du compteur`, `Comptage horaire`), x = `Comptage horaire`)) +
  geom_bar(stat = "identity", fill = "red") +
  labs(title = "Les 10 compteurs avec la moyenne horaire la plus √©lev√©e",
       x = "Nom du compteur",
       y = "Moyenne horaire") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5),
        plot.margin = margin(1, 4, 1, 1, "cm"))
```

```{r}
df2 <- df %>%
  group_by(`Nom du compteur`) %>%
  summarise(`Comptage horaire` = sum(`Comptage horaire`, na.rm = TRUE)) %>%
  arrange(desc(`Comptage horaire`)) %>%
  head(10)

# Create a horizontal bar plot
p2 <- ggplot(df2, aes(y = reorder(`Nom du compteur`, `Comptage horaire`), x = `Comptage horaire`)) +
  geom_bar(stat = "identity", fill = "forestgreen") +
  labs(title = "Les 10 compteurs avec le comptage horaire le plus √©lev√© (total)",
       x = "Nom du compteur",
       y = "Comptage horaire total") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5),
        plot.margin = margin(1, 4, 1, 1, "cm"))
```

```{r}
p1
```

```{r}
p2
```

:::


On peut remarquer plusieurs √©l√©ments probl√©matiques (par exemple les labels) mais
aussi des √©l√©ments ne correspondant pas (les titres des axes, etc.) ou 
manquants (le nom du graphique...)

::: {.callout-tip}
**Exercice 2 : Un peu de style !**
:::


