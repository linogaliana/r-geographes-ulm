---
title: "Evaluation"
echo: false
output: false
---

Ce chapitre pr√©sente la consigne pour l'√©valuation de l'ann√©e 2023-2024.

L'objectif de ces exercices est de vous amener √† explorer la richesse
des donn√©es
√©lectorales fines. Vous pourrez ult√©rieurement aller plus loin pour 
essayer de relier les r√©sultats de vote √† des variables socio√©conomiques
disponibles √† la m√™me √©chelle. 

Les consignes g√©n√©rales sont les suivantes:

::: {.callout-tip}
## Consignes g√©n√©rales

- Envoyer par mail avant le __XX janvier 2024__ deux documents: un fichier `.qmd`
reproductible m√©langeant vos r√©ponses aux questions et vos analyses et
le `.html` g√©n√©r√© gr√¢ce √† celui-ci ;
- Le `.html` ne pr√©sente pas les exemples de code, pensez donc √† mettre
`echo: false` dans les options du _header_ ;
- N'oubliez pas d'ajouter les informations personnelles standards (auteur, titre)
dans votre document ;
- Essayez de soigner le `.html` rendu. Vous pouvez n√©anmoins avoir
des sorties graphiques ou tableau au style diff√©rent de ceux que j'ai mis en
exemple si vous avez envie de donner une touche personnel √† votre rapport ;
- Le document `.qmd` doit √™tre reproductible, c'est-√†-dire que je dois pouvoir
cliquer sur le bouton `Render` et que cela va fonctionner. 
:::


```{r}
library(readr)
library(dplyr)
library(gt)
library(gtExtras)
library(cartiflette)
library(stringr)
library(ggplot2)
library(scales)
library(svglite)
```

Le code d'import des donn√©es est directement mis √† disposition 
pour vous permettre de d√©marrer les exercices.

```{r}
#| echo: true
df <- read_csv(
  'https://www.data.gouv.fr/fr/datasets/r/182268fc-2103-4bcb-a850-6cf90b02a9eb'
)
```

## Explorations g√©n√©rales

::: {.callout-tip}
## Question 1

Cr√©er ou mettre √† jour les variables suivantes:

  - `code_commune`: En utilisant la variable d√©j√† existante et le d√©partement, remplacer la valeur `code_commune` pour constituer un vrai code commune. Par exemple, pour Montrouge, vous devriez obtenir `92049`. 
  - `candidat`: cr√©er une colonne avec le `prenom` et le `nom` mis ensemble, en n'oubliant pas de mettre un espace. Ne pas √©liminer les bulletins abstentions, blancs ou nuls, nous allons les exploiter ult√©rieurement. 

```{r}
df <- df %>% mutate(
  code_commune = paste0(code_departement, code_commune),
  candidat = paste0(paste0(prenom, ' ', nom))
)
```
:::


::: {.callout-tip}
## Exercice 2

Compl√©ter la phrase suivante gr√¢ce √† `R`:

> En 2022, il y avait XXXXX candidats √† l'√©lection pr√©sidentielle

L'int√©grer dans un code _inline_ pour obtenir la phrase comme ci-dessous

_Note: Attention aux [votes non exprim√©s](https://www.conseil-constitutionnel.fr/referendum-traite-constitution-pour-l-europe/bulletins-blancs-et-nuls) et aux abstentions_
:::



```{r}
candidats <- df %>%
  filter(!is.na(prenom)) %>%
  summarise(candidats = n_distinct(candidat)) %>%
  as.numeric()
```


En 2022, il y avait __`r candidats`__ candidats √† l'√©lection pr√©sidentielle.



::: {.callout-tip}
## Question 3

Calculer les scores nationaux de chaque candidat. Repr√©senter dans ce tableau,
pour chaque candidat, le nombre de voix et le pourcatage des votes exprim√©s
(c'est-√†-dire en retirant abstentions et votes non exprim√©s). 

Utiliser `gt` pour repr√©senter cela dans un tableau, par exemple dans le style
de celui disponible plus bas (il n'est pas obligatoire d'aller aussi loin
dans la mise en forme mais essayez d'obtenir un beau tableau tout de m√™me).

_Note: vous pouvez contr√¥ler vos r√©sultats obtenus avec [cette page](https://www.gouvernement.fr/actualite/election-presidentielle-les-resultats-du-premier-tour)_

:::

```{r}
tableau_resultats <- df %>%
  filter(!is.na(prenom)) %>%
  group_by(candidat) %>%
  summarise(votes = sum(voix)) %>%
  mutate(score = votes/sum(votes)) %>%
  arrange(desc(score))
```

_Exemple de tableau √† obtenir_:

```{r}
#| output: true
gt(tableau_resultats %>% mutate(color = "", score2 = 100*score)) %>%
  fmt_integer(columns = votes, locale = "fr") %>%
  fmt_percent(columns = score) %>%
  gt_plt_bar_pct(
    column = score2, scaled = TRUE
  ) %>%
  cols_label(
    votes = "Nombre votes (total)",
    score = "Score (% votes exprim√©s)",
    candidat = "Candidat.e",
    color = "",
    score2 = ""
    ) %>%
  data_color(columns = c('score'), target_columns = color, method = "numeric", palette = "PuOr") %>%
  tab_header(
    title = md("__Elections üá´üá∑__"),
    subtitle = md("R√©sultats du premier tour (üìÖ _10 avril 2022_)")
  ) %>%
  tab_style(
    style = cell_text(weight = "bold", align = "center"),
    locations = cells_column_labels()
  )
```


```{r}
#| eval: false

# Calculer pour les d√©partements de la petite couronne,
# les scores de E. Macron, M. Le Pen. agr√©ger les votes restants en autre
votes_idf_top3 <- df %>%
  filter(!is.na(prenom)) %>%
  filter(code_departement %in% c(75,92,93,94)) %>%
  mutate(candidat2 = if_else(
    nom %in% c("MACRON", "LE PEN"),
    candidat, "Autres candidats")) %>%
  group_by(code_departement, candidat2) %>%
  summarise(votes = sum(voix)) %>%
  group_by(code_departement) %>% 
  mutate(score = votes/sum(votes))

votes_idf_top3 <- votes_idf_top3 %>%
  group_by(code_departement) %>%
  summarize(list_data = list(score))

gt(votes_idf_top3) %>%
  gt_plt_bar_stack(list_data, width = 65,
                   labels = c("Autres candidats", "Macron", "Le Pen"),
                   palette= c("#bfbfbf", "#ff4343", "#0a1c2b"))
```

## Comparaison des scores d√©partements aux moyennes nationales. 

On va essayer d'√©tudier la territorialit√© de certains votes. Pour cela, nous
allons √©tudier la mani√®re dont certains candidats sont surrepr√©sent√©s dans
les r√©sultats par rapport √† leur moyenne nationale. 


::: {.callout-tip}
## Question 4

Cr√©er un _dataframe_ nomm√© `score_departements` stockant, pour chaque
d√©partement, le nombre de vote obtenu pour chaque candidat et 
le score (en %). 

```{r}
score_departements <- df %>%
  filter(!is.na(prenom)) %>%
  group_by(code_departement, candidat) %>%
  summarise(votes = sum(voix)) %>%
  mutate(score = votes/sum(votes)) 
```

Par exemple, vous devriez obtenir le r√©sultat suivant pour l'Aude:


```{r}
#| output: true
score_departements %>% filter(code_departement == 11)
```

:::


::: {.callout-tip}
## Question 5

Refaire le lien avec le niveau national pour comparer le score
d√©partemental avec le score national. Nommer ce _dataframe_
`score_departements`, nous allons le r√©utiliser par la suite. 

```{r}
score_departements <- score_departements %>%
  left_join(
    tableau_resultats,
    by = "candidat",
    suffix = c("_departement", "_national")
  )
```

Par exemple, vous devriez obtenir le r√©sultat suivant pour l'Aude:


```{r}
#| output: true
score_departements %>% filter(code_departement == 11)
```

:::


::: {.callout-tip}
## Question 6

Cr√©er une variable `surrepresentation` qui compare, en relatif, 
les scores nationaux et d√©partementaux.

Par exemple, si un candidat a un score de 30% dans un d√©partement
mais de 15% ailleurs, la valeur de `surrepresentation` sera √©gale √† 100 (%).


```{r}
score_departements <- score_departements %>%
  mutate(surrepresentation = 100*(score_departement/score_national - 1))
```

:::

::: {.callout-tip}
## Question 7

Observer les 5 principales repr√©sentations, en valeur absolue,
pour chaque candidat. Repr√©senter cela sur un graphique, 
du type de celui-ci dessous.

```{r}
#| output: true
score_departements_top <- score_departements %>%
  arrange(candidat, desc(abs(surrepresentation))) %>%
  group_by(candidat) %>%
  filter(row_number() <= 5)

ggplot(score_departements_top) +
  geom_bar(aes(x = surrepresentation, y = factor(code_departement)), stat = "identity") +
  facet_wrap(~candidat, scales = "free")
```

:::


## Un peu de cartographie

Pour cette partie, vous pouvez r√©cup√©rer le fond de carte
des d√©partements gr√¢ce au code ci-dessous:

```{r}
#| echo: true
departement_borders <- download_vectorfile_url_all(
  crs = 4326,
  values = "metropole",
  borders="DEPARTEMENT",
  vectorfile_format="geojson",
  filter_by="FRANCE_ENTIERE",
  source="EXPRESS-COG-CARTO-TERRITOIRE",
  year=2022)
```


::: {.callout-tip}
## Question 8a

Restreindre `score_departements` aux r√©sultats de Marine Le Pen (ne pas √©craser
`score_departements` nous allons l'utiliser √† nouveau !). Faire une jointure
au fond de carte des d√©partements et effectuer une carte de la repr√©sentation. 
L'√©chelle de couleur que vous pouvez utiliser est `white` pour les valeurs les
plus basses et `#394679` pour les valeurs les plus hautes.

Interpr√©ter.

:::

```{r}
score_departements_mlp <- score_departements %>%
  filter(candidat == "Marine LE PEN")

departement_borders_mlp <- departement_borders %>%
  left_join(score_departements_mlp, by = c("INSEE_DEP" = "code_departement"))
```


Vous devriez obtenir une carte proche de celle-ci

```{r}
#| output: true
ggplot(departement_borders_mlp) +
  geom_sf(aes(fill = surrepresentation)) +
  scale_fill_steps(
    n.breaks = 5,
    low = "white", high = "#394679",
    labels = label_number(scale_cut = cut_short_scale())
  ) +
  theme_void()  +
  labs(fill = "(% par rapport\nmoyenne nationale)")
```



::: {.callout-tip}
## Question 8b

M√™me question pour Emmanuel Macron. 
L'√©chelle de couleur que vous pouvez utiliser est `white` pour les valeurs les
plus basses et `#f1c237` pour les valeurs les plus hautes.

Interpr√©ter.

:::


```{r}
score_departements_em <- score_departements %>%
  filter(candidat == "Emmanuel MACRON")

departement_borders_em <- departement_borders %>%
  left_join(score_departements_em, by = c("INSEE_DEP" = "code_departement"))
```

```{r}
#| output: true
ggplot(departement_borders_em) +
  geom_sf(aes(fill = surrepresentation)) +
  scale_fill_steps(
    n.breaks = 5,
    low = "white", high = "#f1c237",
    labels = label_number(scale_cut = cut_short_scale())
  ) +
  theme_void()  +
  labs(fill = "(% par rapport\nmoyenne nationale)")
```

::: {.callout-tip}
## Question 8c

M√™me question pour Jean-Luc M√©lenchon. 
L'√©chelle de couleur que vous pouvez utiliser est `white` pour les valeurs les
plus basses et `#cb452a` pour les valeurs les plus hautes.

Interpr√©ter.

:::


```{r}
score_departements_jlm <- score_departements %>%
  filter(candidat == "Jean-Luc M√âLENCHON")

departement_borders_jlm <- departement_borders %>%
  left_join(score_departements_jlm, by = c("INSEE_DEP" = "code_departement"))
```

```{r}
#| output: true
ggplot(departement_borders_jlm) +
  geom_sf(aes(fill = surrepresentation)) +
  scale_fill_steps(
    n.breaks = 5,
    low = "white", high = "#cb452a",
    labels = label_number(scale_cut = cut_short_scale())
  ) +
  theme_void()  +
  labs(fill = "(% par rapport\nmoyenne nationale)")
```


## Focus sur l'abstention

::: {.callout-tip}
# Question 9

Retrouver les 10 principales communes abstentionnistes parmi les 
communes o√π il y a eu plus de 2000 votes et n'appartenant pas
aux d√©partements des DROM ou des Fran√ßais √† l'√©tranger
(pour cela, le filtre est
directement donn√©: `filter(!str_starts(code_commune, "(fr|98|97)"))`.

Analyser

:::


```{r}
abstention <- df %>%
  mutate(abstention = if_else(nom == "abstentions", "Abstentions", "Exprim√©s")) %>%
  group_by(code_commune, libelle_commune, abstention) %>%
  summarise(votes = sum(voix)) %>%
  group_by(code_commune, libelle_commune) %>%
  mutate(taux_abstention = votes/sum(votes)) %>%
  filter(
    abstention == "Abstentions", !str_starts(code_commune, "(fr|98|97)"),
    votes > 2000
    ) %>%
  arrange(desc(taux_abstention))
```


Le tableau √† obtenir sera le suivant. Le votre devra avoir au moins une colonne
suppl√©mentaire: les noms de commune. 

```{r}
#| output: true
abstention %>%
    select(-one_of("libelle_commune"))
```



### L'abstention en Corse

Voici le code pour r√©cup√©rer le fond de carte des communes Corse.


```{r}
#| echo: true
corse <- download_vectorfile_url_all(
  crs = 4326,
  values = c("2A","2B"),
  borders="COMMUNE",
  vectorfile_format="geojson",
  filter_by="DEPARTEMENT",
  source="EXPRESS-COG-CARTO-TERRITOIRE",
  year=2022)
```

::: {.callout-note}

Faire une carte du taux d'abstention par commune en corse
:::



```{r}
abstention_corse <- df %>%
  mutate(abstention = if_else(nom == "abstentions", "Abstentions", "Exprim√©s")) %>%
  group_by(code_commune, libelle_commune, abstention) %>%
  summarise(votes = sum(voix)) %>%
  group_by(code_commune, libelle_commune) %>%
  mutate(taux_abstention = votes/sum(votes)) %>%
  filter(str_starts(code_commune,'(2A|2B)'), abstention == "Abstentions") %>%
  mutate(code_commune_propre = str_sub(code_commune, 3, -1))


corse_enrichie <- corse %>% inner_join(abstention_corse, by = c("INSEE_COM" = "code_commune"))
```

La carte obtenue devrait ressembler √† celle-ci:


```{r}
#| output: true
ggplot(corse_enrichie) +
  geom_sf(aes(fill = taux_abstention)) +
  scale_fill_fermenter(
    n.breaks = 5,
    palette = "RdPu",
    direction = 1,
    labels = label_number(scale_cut = cut_short_scale())
  ) +
  theme_void() +
  labs(fill = "Taux d'abstention")
```

