---
title: "Manipuler des donn√©es spatiales avec `sf`"
echo: false
number-sections: true
---

::: {.badge}
<a href="https://datalab.sspcloud.fr/launcher/ide/rstudio?autoLaunch=true&init.personalInit=¬´https%3A%2F%2Fraw.githubusercontent.com%2Flinogaliana%2Fr-geographie%2Fmain%2Fsspcloud%2Finit.sh¬ª&networking.user.enabled=true&onyxia.friendlyName=¬´rstudio-cours-ENS¬ª" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Tester%20via%20SSP%20cloud%20-%20SSPCloud?logo=R&labelColor=black&color=%231965b8" alt="Onyxia"></a><br>
:::

<details>
<summary>
D√©rouler les _slides_ ci-dessous ou [cliquer ici](/slides/wrangling.qmd)
pour afficher les slides en plein √©cran.
</summary>


``` {.yaml code-preview="/slides/wrangling.qmd"}
```

</details>


Dans ce troisi√®me TP,
nous allons apprendre √† importer et
manipuler des donn√©es spatiales avec
{{< fa brands r-project >}}. Ce logiciel propose
des fonctionnalit√©s tr√®s int√©ressantes pour ce type de
donn√©es complexes qui le rendent capable de se comporter
comme un SIG. Gr√¢ce √† la librairie `sf`, une extension
de `dplyr` aux donn√©es spatiales, les
donn√©es g√©ographiques pourront √™tre manipul√©es
comme n'importe quel type de donn√©es avec {{< fa brands r-project >}}.
La complexit√© induite par la dimension spatiale ne sera pas ressentie. 

Si vous √™tes int√©ress√©s par `Python` {{< fa brands python >}},
une version tr√®s proche de ce TP est disponible dans [mon cours de l'ENSAE](https://pythonds.linogaliana.fr/content/manipulation/03_geopandas_TP.html).


```{r}
#| eval: false
remotes::install_github("linogaliana/cartiflette-r")
```

Dans ce chapitre, nous allons utiliser les packages
suivants:


```{r}
#| echo: true
#| output: false
library(dplyr)
library(sf)
library(ggplot2)
library(cartiflette)
```


::: {.callout-note}

Certains exemples de code pr√©sentent des annotations sur le c√¥t√©,
passez votre souris dessus pour les afficher, comme ci-dessous

```{r}
#| echo: true
#| output: false
"une annotation explicative m'accompagne √† droite" #<1>
```
1. Je m'affiche quand on passe la souris sur moi üê≠ !

:::


## Lire et enrichir des donn√©es spatiales

Dans cette partie,
nous utiliserons
les fonds de carte de l'IGN dont
la mise √† disposition est facilit√©e
par le projet [`cartiflette`](https://github.com/InseeFrLab/cartiflette.git)[^cartiflette-r].

[^cartiflette-r]:
  La librairie {{< fa brands r-project >}} est exp√©rimentale mais 
  les prochaines semaines devraient permettre de combler ce manque. 
  Une documentation interactive illustrant le code n√©cessaire pour reproduire
  telle ou telle carte est disponible sur [linogaliana.github.io/cartiflette-website](https://linogaliana.github.io/cartiflette-website/index.html).


::: {.callout-tip}
## Exercice 1: lire et explorer la structure de fichiers g√©ographiques

1. S'inspirer des exemples de code pr√©sents dans les slides mobilisant
le package `cartiflette`
pour t√©l√©charger les donn√©es communales des d√©partements 75, 92, 93 et 94.
Vous pouvez nommer l'objet `communes_borders`
2. Regarder les premi√®res lignes des donn√©es. Identifier la diff√©rence avec
un DataFrame standard. 
3. Afficher le `crs` de `communes_borders`. Ce dernier contr√¥le la
transformation de l'espace tridimensionnel terrestre en une surface plane.
Utiliser `st_transform` pour transformer les donn√©es en Lambert 93, le 
syst√®me officiel (code EPSG 2154). 
4. Afficher les communes des Hauts de Seine (d√©partement 92) et repr√©senter rapidement la carte.
5. R√©pr√©senter la carte de Paris : quel est le probl√®me ?
:::

```{r}
#| output: false
#| label: download-borders-communes
#1) Chargement des donn√©es de Cartiflette
communes_borders <- download_vectorfile_url_all(
    crs = 4326,
    values = c("75", "92", "93", "94"),
    borders="COMMUNE",
    vectorfile_format="geojson",
    filter_by="DEPARTEMENT",
    source="EXPRESS-COG-CARTO-TERRITOIRE",
    year=2022)
```

```{r}
#| output: false
# 2) Regarder les premi√®res lignes
head(communes_borders)
```

```{r}
#| output: false

# 3) Afficher le crs
sf::st_crs(communes_borders)
# Les donn√©es sont en WGS84, on les reprojette en lambert 93
communes_borders <- communes_borders %>% st_transform(2154)
```


<details>

<summary>
Si vous d√©sirez observer l'aspect de la
carte du 92 (question 4), d√©roulez cette partie.
</summary>

```{r}
#| label: plot-92
#| output: false

# 4) afficher les communes du d√©partement 92
hds <- communes_borders %>% filter(INSEE_DEP == "92")
map_92 <- ggplot(hds) +
    geom_sf(fill = "white") + theme_void()
```

```{r}
map_92
```

</details>

En ce qui concerne Paris, √† l'issue de la question 5, la carte
aura l'aspect suivant:

```{r}
# 5) Repr√©senter la carte de Paris. Quel est le probl√®me ?
ggplot(communes_borders %>% filter(INSEE_DEP == "75")) +
    geom_sf(fill = "white") + theme_void()
```



On remarque rapidement le probl√®me.
On ne dispose ainsi pas des limites des arrondissements parisiens, ce
qui appauvrit grandement la carte de Paris. 

On pourrait les r√©cup√©rer directement 
depuis le site d'_open-data_ du Grand Paris 
mais on propose ici d'utiliser √† nouveau
`cartiflette` afin de disposer du fonds de carte officiel
des arrondissements.




::: {.callout-tip}
## Exercice 2: compl√©ter des donn√©es spatiales issues de sources diff√©rentes

1. Importer les donn√©es de d√©coupage des arrondissements parisiens √† l'adresse √† l'aide de `cartiflette`.
2. V√©rifier sur une carte que les d√©coupages des arrondissements sont bien pr√©sents.
3. V√©rifier l'attribut `crs`. Est-il coh√©rent avec celui des donn√©es communales ?
Si non, transformer en Lambert 93 (code EPSG 2154).
4. Retirer Paris du jeu de donn√©es communales et utiliser les arrondissements
pour enrichir (nommer l'objet obtenu `data_borders`). 
5. Repr√©senter √† nouveau les communes de la petite couronne parisienne (75, 92, 93, 94)

:::


```{r}
library(cartiflette)

# Question 1
arrondissements = download_vectorfile_url_all(
    crs = 4326,
    values = "75",
    borders="ARRONDISSEMENT_MUNICIPAL",
    vectorfile_format="geojson",
    filter_by="DEPARTEMENT",
    source="EXPRESS-COG-CARTO-TERRITOIRE",
    year=2022)
```


La carte de Paris intra-muros est, apr√®s la
r√©cup√©ration des arrondissements avec
`cartiflette` de ce type l√†:

```{r}
plot(
  st_geometry(arrondissements)
)
```

```{r}
#3) V√©rifier l'attribut `crs`. Est-il coh√©rent ?
print(st_crs(communes_borders))
print(st_crs(arrondissements))

arrondissements <- arrondissements %>% st_transform(2154)
print(st_crs(communes_borders) == st_crs(arrondissements))
```


```{r}
#4) Retirer Paris et ajouter les arrondissements
data_paris <- dplyr::bind_rows(
  communes_borders %>% filter(INSEE_DEP != "75"),
  arrondissements
)
```

```{r}
ggplot(data_paris) +
    geom_sf(fill = "white") + theme_void()
```
